<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ESP-AT-FreeRTOS-Library-M487.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ESP-AT-FreeRTOS-Library-M487.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Nov 14 13:08:49 2023
<BR><P>
<H3>Maximum Stack Usage =        480 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lwesp_ll_uart_thread_func &rArr; lwesp_input_process &rArr; lwespi_process &rArr; lwespi_parse_received &rArr; lwespi_process_sub_cmd &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[f]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[54]">BPWM0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[55]">BPWM1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[41]">CAN0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[42]">CAN1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[69]">CAN2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[57]">CCAP_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[e]">CKFAIL_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4d]">CRYPTO_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[f]">Default_Handler</a> from startup_m480.o(.text) referenced 14 times from startup_m480.o(RESET)
 <LI><a href="#[34]">EADC00_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[35]">EADC01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[37]">EADC02_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[38]">EADC03_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[65]">EADC10_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[66]">EADC11_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[67]">EADC12_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[68]">EADC13_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5b]">ECAP0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5c]">ECAP1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[60]">EHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4f]">EINT6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5e]">EINT7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4a]">EMAC_RX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[49]">EMAC_TX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23]">EPWM0P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[24]">EPWM0P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[25]">EPWM0P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[27]">EPWM1P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[28]">EPWM1P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[29]">EPWM1P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4e]">GPG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5d]">GPH_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6b]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[58]">I2C2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4b]">I2S0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3f]">OHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4c]">OPA0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[32]">PDMA_IRQHandler</a> from lwesp_ll_m480.o(i.PDMA_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[59]">QEI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5a]">QEI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[20]">QSPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3b]">QSPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[43]">SC0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[44]">SC1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[45]">SC2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[47]">SDH0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5f]">SDH1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[56]">SPIM_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_m480.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_m480.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_m480.o(i.SystemInit) referenced from startup_m480.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[62]">TRNG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[48]">USBD20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3e]">USBD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[61]">USBOTG20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[40]">USBOTG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[52]">USCI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[53]">USCI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m480.o(.text)
 <LI><a href="#[6e]">fputc</a> from retarget.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[82]">lwesp_callback_func</a> from main.o(i.lwesp_callback_func) referenced from main.o(i.vWifiTask)
 <LI><a href="#[7a]">lwesp_ll_hardreset</a> from lwesp_ll_m480.o(i.lwesp_ll_hardreset) referenced from lwesp_ll_m480.o(i.lwesp_ll_init)
 <LI><a href="#[75]">lwesp_ll_uart_dma_handler_rx</a> from lwesp_ll_m480.o(i.lwesp_ll_uart_dma_handler_rx) referenced from lwesp_ll_m480.o(i.lwesp_ll_configure_pdma_rxtx_enable)
 <LI><a href="#[74]">lwesp_ll_uart_dma_handler_tx</a> from lwesp_ll_m480.o(i.lwesp_ll_uart_dma_handler_tx) referenced from lwesp_ll_m480.o(i.lwesp_ll_configure_pdma_rxtx_enable)
 <LI><a href="#[78]">lwesp_ll_uart_thread_func</a> from lwesp_ll_m480.o(i.lwesp_ll_uart_thread_func) referenced from lwesp_ll_m480.o(i.lwesp_ll_configure_uart)
 <LI><a href="#[72]">lwesp_thread_process</a> from lwesp_threads.o(i.lwesp_thread_process) referenced from lwesp.o(i.lwesp_init)
 <LI><a href="#[71]">lwesp_thread_produce</a> from lwesp_threads.o(i.lwesp_thread_produce) referenced from lwesp.o(i.lwesp_init)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp_conn.o(i.lwesp_conn_close)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp.o(i.lwesp_reset_with_delay)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp.o(i.lwesp_restore)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp_sta.o(i.lwesp_sta_getip)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp_sta.o(i.lwesp_sta_list_ap)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp_conn.o(i.lwespi_conn_check_available_rx_data)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp_conn.o(i.lwespi_conn_manual_tcp_try_read_data)
 <LI><a href="#[6f]">lwespi_initiate_cmd</a> from lwesp_int.o(i.lwespi_initiate_cmd) referenced from lwesp_conn.o(i.prv_conn_send)
 <LI><a href="#[6a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[81]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[80]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[83]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[7b]">prv_check_available_rx_data_evt_fn</a> from lwesp_conn.o(i.prv_check_available_rx_data_evt_fn) referenced from lwesp_conn.o(i.lwespi_conn_check_available_rx_data)
 <LI><a href="#[7d]">prv_conn_timeout_cb</a> from lwesp_conn.o(i.prv_conn_timeout_cb) referenced from lwesp_conn.o(i.lwespi_conn_start_timeout)
 <LI><a href="#[70]">prv_def_callback</a> from lwesp.o(i.prv_def_callback) referenced from lwesp.o(i.lwesp_init)
 <LI><a href="#[73]">prv_keep_alive_timeout_fn</a> from lwesp.o(i.prv_keep_alive_timeout_fn) referenced from lwesp.o(i.lwesp_init)
 <LI><a href="#[73]">prv_keep_alive_timeout_fn</a> from lwesp.o(i.prv_keep_alive_timeout_fn) referenced from lwesp.o(i.prv_keep_alive_timeout_fn)
 <LI><a href="#[7c]">prv_manual_tcp_read_data_evt_fn</a> from lwesp_conn.o(i.prv_manual_tcp_read_data_evt_fn) referenced from lwesp_conn.o(i.lwespi_conn_manual_tcp_try_read_data)
 <LI><a href="#[79]">send_data</a> from lwesp_ll_m480.o(i.send_data) referenced from lwesp_ll_m480.o(i.lwesp_ll_init)
 <LI><a href="#[76]">uart_dma_rx_done_callback</a> from lwesp_ll_m480.o(i.uart_dma_rx_done_callback) referenced from lwesp_ll_m480.o(i.lwesp_ll_configure_uart)
 <LI><a href="#[77]">uart_dma_tx_done_callback</a> from lwesp_ll_m480.o(i.uart_dma_tx_done_callback) referenced from lwesp_ll_m480.o(i.lwesp_ll_configure_uart)
 <LI><a href="#[7e]">vCheckTask</a> from main.o(i.vCheckTask) referenced from main.o(i.main)
 <LI><a href="#[7f]">vWifiTask</a> from main.o(i.vWifiTask) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[84]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[17f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[180]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[171]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CCAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EADC10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EADC11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EADC12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EADC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBD20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_list_ap
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_manual_tcp_try_read_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_check_available_rx_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_send
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_restore
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_reset_with_delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_getip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[126]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[11c]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ipd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[125]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_string
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_port
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_number
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_mac
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_ip
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[122]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[11f]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_link_conn
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[85]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[186]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[187]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[188]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>CLK_DisablePLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, clk.o(i.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[cb]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUartClock
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_clock
</UL>

<P><STRONG><a name="[8e]"></a>CLK_EnablePLL</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[162]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[92]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_set_timeout
</UL>

<P><STRONG><a name="[91]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[94]"></a>CLK_SetCoreClock</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[95]"></a>CLK_SetHCLK</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[d3]"></a>CLK_SetModuleClock</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUartClock
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[90]"></a>CLK_WaitClockReady</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_SetMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_hardreset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pin
</UL>

<P><STRONG><a name="[6b]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[da]"></a>PDMA_DisableInt</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pdma.o(i.PDMA_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_set_timeout
</UL>

<P><STRONG><a name="[d8]"></a>PDMA_DisableTimeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pdma.o(i.PDMA_DisableTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_set_timeout
</UL>

<P><STRONG><a name="[ce]"></a>PDMA_EnableInt</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pdma.o(i.PDMA_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_set_timeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_rxtx_enable
</UL>

<P><STRONG><a name="[32]"></a>PDMA_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.PDMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>PDMA_Open</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pdma.o(i.PDMA_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_rxtx_enable
</UL>

<P><STRONG><a name="[df]"></a>PDMA_SetBurstType</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, pdma.o(i.PDMA_SetBurstType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetBurstType
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
</UL>

<P><STRONG><a name="[d9]"></a>PDMA_SetTimeOut</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, pdma.o(i.PDMA_SetTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_set_timeout
</UL>

<P><STRONG><a name="[de]"></a>PDMA_SetTransferAddr</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, pdma.o(i.PDMA_SetTransferAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PDMA_SetTransferAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
</UL>

<P><STRONG><a name="[dd]"></a>PDMA_SetTransferCnt</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, pdma.o(i.PDMA_SetTransferCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
</UL>

<P><STRONG><a name="[dc]"></a>PDMA_SetTransferMode</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, pdma.o(i.PDMA_SetTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDMA_SetTransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
</UL>

<P><STRONG><a name="[ca]"></a>SYS_ResetModule</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_clock
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system_m480.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, system_m480.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>UART_EnableFlowCtrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(i.UART_EnableFlowCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[9b]"></a>UART_Open</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUart
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[9c]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18b]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[96]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWifiTask
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCheckTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_to_preferred_access_point
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_callback_func
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[18c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[18e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9e]"></a>connect_to_preferred_access_point</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, main.o(i.connect_to_preferred_access_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = connect_to_preferred_access_point &rArr; lwesp_sta_list_ap &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_list_ap
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_has_ip
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWifiTask
</UL>

<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[a9]"></a>lwesp_conn_close</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lwesp_conn.o(i.lwesp_conn_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cipstatus_cipstate
</UL>

<P><STRONG><a name="[ad]"></a>lwesp_conn_is_active</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwesp_conn.o(i.lwesp_conn_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwesp_conn_is_active &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_is_valid_conn_ptr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[a2]"></a>lwesp_core_lock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwesp.o(i.lwesp_core_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lwesp_core_lock &rArr; lwesp_sys_protect &rArr; lwesp_sys_mutex_lock &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_protect
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_has_ip
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_is_active
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_calloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_input_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_from_mbox_with_timeout_checks
</UL>

<P><STRONG><a name="[a5]"></a>lwesp_core_unlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwesp.o(i.lwesp_core_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_unprotect
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_has_ip
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_is_active
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_calloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_input_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_from_mbox_with_timeout_checks
</UL>

<P><STRONG><a name="[b1]"></a>lwesp_delay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lwesp.o(i.lwesp_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lwesp_delay &rArr; lwesp_sys_sem_create &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_wait
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_release
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_delete
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
</UL>

<P><STRONG><a name="[a8]"></a>lwesp_evt_get_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwesp_evt.o(i.lwesp_evt_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_callback_func
</UL>

<P><STRONG><a name="[b6]"></a>lwesp_init</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, lwesp.o(i.lwesp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lwesp_init &rArr; lwesp_restore &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_thread_terminate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_thread_create
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_wait
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_isvalid
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_invalid
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_delete
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_isvalid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_invalid
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_create
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_restore
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_reset_with_delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWifiTask
</UL>

<P><STRONG><a name="[c6]"></a>lwesp_input_process</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lwesp_input.o(i.lwesp_input_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lwesp_input_process &rArr; lwespi_process &rArr; lwespi_parse_received &rArr; lwespi_process_sub_cmd &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_uart_thread_func
</UL>

<P><STRONG><a name="[c8]"></a>lwesp_ll_configure_pdma_clock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lwesp_ll_m480.o(i.lwesp_ll_configure_pdma_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwesp_ll_configure_pdma_clock &rArr; CLK_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[cc]"></a>lwesp_ll_configure_pdma_rxtx_enable</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lwesp_ll_m480.o(i.lwesp_ll_configure_pdma_rxtx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwesp_ll_configure_pdma_rxtx_enable &rArr; PDMA_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[d0]"></a>lwesp_ll_configure_pin</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lwesp_ll_m480.o(i.lwesp_ll_configure_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwesp_ll_configure_pin &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[d2]"></a>lwesp_ll_configure_uart</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, lwesp_ll_m480.o(i.lwesp_ll_configure_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lwesp_ll_configure_uart &rArr; lwesp_sys_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableFlowCtrl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_thread_create
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_create
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_rxtx_enable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_clock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_init
</UL>

<P><STRONG><a name="[7a]"></a>lwesp_ll_hardreset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwesp_ll_m480.o(i.lwesp_ll_hardreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwesp_ll_hardreset &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_ll_m480.o(i.lwesp_ll_init)
</UL>
<P><STRONG><a name="[bb]"></a>lwesp_ll_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwesp_ll_m480.o(i.lwesp_ll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lwesp_ll_init &rArr; lwesp_ll_configure_uart &rArr; lwesp_sys_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_assignmemory
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[d7]"></a>lwesp_ll_pdma_set_timeout</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lwesp_ll_m480.o(i.lwesp_ll_pdma_set_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lwesp_ll_pdma_set_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTimeOut
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
</UL>

<P><STRONG><a name="[d5]"></a>lwesp_ll_pdma_start_rx</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lwesp_ll_m480.o(i.lwesp_ll_pdma_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lwesp_ll_pdma_start_rx &rArr; lwesp_ll_pdma_set_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferAddr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetBurstType
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_set_timeout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdma_enable_channel
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdma_disable_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_uart_thread_func
</UL>

<P><STRONG><a name="[e1]"></a>lwesp_ll_pdma_start_tx</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lwesp_ll_m480.o(i.lwesp_ll_pdma_start_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lwesp_ll_pdma_start_tx &rArr; lwesp_ll_pdma_set_timeout &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferAddr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetBurstType
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableTimeout
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_set_timeout
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdma_enable_channel
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdma_disable_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[161]"></a>lwesp_ll_pdma_stop_tx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.lwesp_ll_pdma_stop_tx))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[165]"></a>lwesp_ll_pdma_untransfer_bytecount</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.lwesp_ll_pdma_untransfer_bytecount))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_rx_done_callback
</UL>

<P><STRONG><a name="[d6]"></a>lwesp_mem_assignmemory</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lwesp_mem.o(i.lwesp_mem_assignmemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lwesp_mem_assignmemory &rArr; mem_assignmem
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_assignmem
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_init
</UL>

<P><STRONG><a name="[e4]"></a>lwesp_mem_calloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwesp_mem.o(i.lwesp_mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwesp_mem_calloc &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
</UL>

<P><STRONG><a name="[e6]"></a>lwesp_mem_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwesp_mem.o(i.lwesp_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
</UL>

<P><STRONG><a name="[a4]"></a>lwesp_mem_free_s</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwesp_mem.o(i.lwesp_mem_free_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_events_for_timeout_or_error
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_next_timeout
</UL>

<P><STRONG><a name="[aa]"></a>lwesp_mem_malloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lwesp_mem.o(i.lwesp_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwesp_mem_malloc &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_list_ap
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_manual_tcp_try_read_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_check_available_rx_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_send
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_restore
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_reset_with_delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_getip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_new
</UL>

<P><STRONG><a name="[e8]"></a>lwesp_pbuf_free</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lwesp_pbuf.o(i.lwesp_pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwesp_pbuf_free &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free_s
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[e9]"></a>lwesp_pbuf_free_s</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwesp_pbuf.o(i.lwesp_pbuf_free_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lwesp_pbuf_free_s &rArr; lwesp_pbuf_free &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_sub_cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[123]"></a>lwesp_pbuf_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwesp_pbuf.o(i.lwesp_pbuf_length))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[ea]"></a>lwesp_pbuf_new</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwesp_pbuf.o(i.lwesp_pbuf_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lwesp_pbuf_new &rArr; lwesp_mem_malloc &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_sub_cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[124]"></a>lwesp_pbuf_set_ip</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwesp_pbuf.o(i.lwesp_pbuf_set_ip))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[eb]"></a>lwesp_reset</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwesp.o(i.lwesp_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lwesp_reset &rArr; lwesp_reset_with_delay &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_reset_with_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
</UL>

<P><STRONG><a name="[c0]"></a>lwesp_reset_with_delay</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lwesp.o(i.lwesp_reset_with_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwesp_reset_with_delay &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_reset
</UL>

<P><STRONG><a name="[bf]"></a>lwesp_restore</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lwesp.o(i.lwesp_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwesp_restore &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
</UL>

<P><STRONG><a name="[ec]"></a>lwesp_sta_getip</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, lwesp_sta.o(i.lwesp_sta_getip))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lwesp_sta_getip &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[9f]"></a>lwesp_sta_has_ip</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwesp_sta.o(i.lwesp_sta_has_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lwesp_sta_has_ip &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_is_joined
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_to_preferred_access_point
</UL>

<P><STRONG><a name="[ed]"></a>lwesp_sta_is_joined</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwesp_sta.o(i.lwesp_sta_is_joined))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lwesp_sta_is_joined &rArr; lwesp_sta_has_ip &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_has_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWifiTask
</UL>

<P><STRONG><a name="[a0]"></a>lwesp_sta_list_ap</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lwesp_sta.o(i.lwesp_sta_list_ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lwesp_sta_list_ap &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_to_preferred_access_point
</UL>

<P><STRONG><a name="[b7]"></a>lwesp_sys_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lwesp_sys_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
</UL>

<P><STRONG><a name="[b8]"></a>lwesp_sys_mbox_create</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mbox_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lwesp_sys_mbox_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[c2]"></a>lwesp_sys_mbox_delete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mbox_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwesp_sys_mbox_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
</UL>

<P><STRONG><a name="[e2]"></a>lwesp_sys_mbox_get</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mbox_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwesp_sys_mbox_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_uart_thread_func
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_from_mbox_with_timeout_checks
</UL>

<P><STRONG><a name="[c3]"></a>lwesp_sys_mbox_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mbox_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
</UL>

<P><STRONG><a name="[c1]"></a>lwesp_sys_mbox_isvalid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mbox_isvalid))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
</UL>

<P><STRONG><a name="[f4]"></a>lwesp_sys_mbox_put</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mbox_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwesp_sys_mbox_put &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
</UL>

<P><STRONG><a name="[f6]"></a>lwesp_sys_mbox_putnow</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mbox_putnow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lwesp_sys_mbox_putnow &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_tx_done_callback
</UL>

<P><STRONG><a name="[f8]"></a>lwesp_sys_mutex_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lwesp_sys_mutex_lock &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_protect
</UL>

<P><STRONG><a name="[fa]"></a>lwesp_sys_mutex_unlock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_unprotect
</UL>

<P><STRONG><a name="[a7]"></a>lwesp_sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwesp_sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_next_timeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_timeout_diff
</UL>

<P><STRONG><a name="[af]"></a>lwesp_sys_protect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwesp_sys_protect &rArr; lwesp_sys_mutex_lock &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
</UL>

<P><STRONG><a name="[b2]"></a>lwesp_sys_sem_create</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lwesp_sys_freertos.o(i.lwesp_sys_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lwesp_sys_sem_create &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_delay
</UL>

<P><STRONG><a name="[b5]"></a>lwesp_sys_sem_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwesp_sys_sem_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_delay
</UL>

<P><STRONG><a name="[c5]"></a>lwesp_sys_sem_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwesp_sys_freertos.o(i.lwesp_sys_sem_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
</UL>

<P><STRONG><a name="[c4]"></a>lwesp_sys_sem_isvalid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwesp_sys_freertos.o(i.lwesp_sys_sem_isvalid))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_process
</UL>

<P><STRONG><a name="[b4]"></a>lwesp_sys_sem_release</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwesp_sys_sem_release &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_delay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[b3]"></a>lwesp_sys_sem_wait</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lwesp_sys_freertos.o(i.lwesp_sys_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lwesp_sys_sem_wait &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_delay
</UL>

<P><STRONG><a name="[b9]"></a>lwesp_sys_thread_create</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, lwesp_sys_freertos.o(i.lwesp_sys_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lwesp_sys_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
</UL>

<P><STRONG><a name="[ba]"></a>lwesp_sys_thread_terminate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_thread_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lwesp_sys_thread_terminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
</UL>

<P><STRONG><a name="[b0]"></a>lwesp_sys_unprotect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwesp_sys_freertos.o(i.lwesp_sys_unprotect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
</UL>

<P><STRONG><a name="[72]"></a>lwesp_thread_process</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwesp_threads.o(i.lwesp_thread_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lwesp_thread_process &rArr; lwespi_get_from_mbox_with_timeout_checks &rArr; process_next_timeout &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_isvalid
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_from_mbox_with_timeout_checks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp.o(i.lwesp_init)
</UL>
<P><STRONG><a name="[71]"></a>lwesp_thread_produce</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, lwesp_threads.o(i.lwesp_thread_produce))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwesp_thread_produce &rArr; lwespi_reset_everything &rArr; reset_connections &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_wait
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_isvalid
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_invalid
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_delete
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_delay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_events_for_timeout_or_error
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp.o(i.lwesp_init)
</UL>
<P><STRONG><a name="[be]"></a>lwesp_timeout_add</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, lwesp_timeout.o(i.lwesp_timeout_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lwesp_timeout_add &rArr; lwesp_mem_calloc &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_calloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_putnow
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_start_timeout
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_keep_alive_timeout_fn
</UL>

<P><STRONG><a name="[130]"></a>lwesp_u32_to_gen_str</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, lwesp_utils.o(i.lwesp_u32_to_gen_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwesp_u32_to_gen_str
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_port
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_number
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_mac
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_ip
</UL>

<P><STRONG><a name="[102]"></a>lwespi_conn_check_available_rx_data</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lwesp_conn.o(i.lwespi_conn_check_available_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lwespi_conn_check_available_rx_data &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[bd]"></a>lwespi_conn_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwesp_conn.o(i.lwespi_conn_init))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
</UL>

<P><STRONG><a name="[103]"></a>lwespi_conn_manual_tcp_try_read_data</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lwesp_conn.o(i.lwespi_conn_manual_tcp_try_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwespi_conn_manual_tcp_try_read_data &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_manual_tcp_read_data_evt_fn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_timeout_cb
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_check_available_rx_data_evt_fn
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[104]"></a>lwespi_conn_start_timeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwesp_conn.o(i.lwespi_conn_start_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwespi_conn_start_timeout &rArr; lwesp_timeout_add &rArr; lwesp_mem_calloc &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_timeout_cb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[12e]"></a>lwespi_get_cipstatus_or_cipstate_cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwesp_int.o(i.lwespi_get_cipstatus_or_cipstate_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_sub_cmd
</UL>

<P><STRONG><a name="[ff]"></a>lwespi_get_from_mbox_with_timeout_checks</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lwesp_timeout.o(i.lwespi_get_from_mbox_with_timeout_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lwespi_get_from_mbox_with_timeout_checks &rArr; process_next_timeout &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_next_timeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_timeout_diff
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_get
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_process
</UL>

<P><STRONG><a name="[6f]"></a>lwespi_initiate_cmd</STRONG> (Thumb, 5058 bytes, Stack size 16 bytes, lwesp_int.o(i.lwespi_initiate_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lwespi_initiate_cmd &rArr; lwespi_tcpip_process_send_data &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_is_active
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_delay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_string
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_port
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_number
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_mac
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_ip
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ip_is_valid
</UL>
<BR>[Address Reference Count : 8]<UL><LI> lwesp.o(i.lwesp_reset_with_delay)
<LI> lwesp_sta.o(i.lwesp_sta_getip)
<LI> lwesp.o(i.lwesp_restore)
<LI> lwesp_conn.o(i.lwespi_conn_check_available_rx_data)
<LI> lwesp_conn.o(i.lwespi_conn_manual_tcp_try_read_data)
<LI> lwesp_conn.o(i.prv_conn_send)
<LI> lwesp_conn.o(i.lwesp_conn_close)
<LI> lwesp_sta.o(i.lwesp_sta_list_ap)
</UL>
<P><STRONG><a name="[ae]"></a>lwespi_is_valid_conn_ptr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lwesp_int.o(i.lwespi_is_valid_conn_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_is_active
</UL>

<P><STRONG><a name="[10d]"></a>lwespi_parse_ap_conn_disconn_sta</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lwesp_parser.o(i.lwespi_parse_ap_conn_disconn_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwespi_parse_ap_conn_disconn_sta &rArr; lwespi_send_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[10f]"></a>lwespi_parse_ap_ip_sta</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lwesp_parser.o(i.lwespi_parse_ap_ip_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lwespi_parse_ap_ip_sta &rArr; lwespi_parse_ip &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_mac
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[111]"></a>lwespi_parse_at_sdk_version</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, lwesp_parser.o(i.lwespi_parse_at_sdk_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwespi_parse_at_sdk_version &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[113]"></a>lwespi_parse_ciprecvlen</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_ciprecvlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lwespi_parse_ciprecvlen &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[114]"></a>lwespi_parse_cipstatus_cipstate</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_cipstatus_cipstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwespi_parse_cipstatus_cipstate &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_string
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[116]"></a>lwespi_parse_cwdhcp</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lwesp_parser.o(i.lwespi_parse_cwdhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwespi_parse_cwdhcp &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[117]"></a>lwespi_parse_cwjap</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_cwjap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwespi_parse_cwjap &rArr; lwespi_parse_string
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_string
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[118]"></a>lwespi_parse_cwlap</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_cwlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwespi_parse_cwlap &rArr; lwespi_parse_string
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_string
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[119]"></a>lwespi_parse_cwlif</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_cwlif))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lwespi_parse_cwlif &rArr; lwespi_parse_ip &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_mac
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[11a]"></a>lwespi_parse_cwsap</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_cwsap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwespi_parse_cwsap &rArr; lwespi_parse_string
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_string
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[120]"></a>lwespi_parse_hexnumber</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, lwesp_parser.o(i.lwespi_parse_hexnumber))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_mac
</UL>

<P><STRONG><a name="[110]"></a>lwespi_parse_ip</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, lwesp_parser.o(i.lwespi_parse_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwespi_parse_ip &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_link_conn
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ipd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwlif
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cipstatus_cipstate
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ap_ip_sta
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[11b]"></a>lwespi_parse_ipd</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lwesp_parser.o(i.lwespi_parse_ipd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lwespi_parse_ipd &rArr; lwespi_parse_ip &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_port
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ip
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[11e]"></a>lwespi_parse_link_conn</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, lwesp_parser.o(i.lwespi_parse_link_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwespi_parse_link_conn &rArr; lwespi_parse_ip &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_port
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ip
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[10e]"></a>lwespi_parse_mac</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwespi_parse_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_hexnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwlif
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwlap
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwjap
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ap_ip_sta
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ap_conn_disconn_sta
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[112]"></a>lwespi_parse_number</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, lwesp_parser.o(i.lwespi_parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwespi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_port
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_link_conn
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ipd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ip
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwsap
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwlap
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwjap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwdhcp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cipstatus_cipstate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ciprecvlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_at_sdk_version
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[11d]"></a>lwespi_parse_port</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lwesp_parser.o(i.lwespi_parse_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwespi_parse_port &rArr; lwespi_parse_number
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_link_conn
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ipd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[115]"></a>lwespi_parse_string</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwesp_parser.o(i.lwespi_parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwespi_parse_string
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwsap
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwlap
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwjap
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cipstatus_cipstate
</UL>

<P><STRONG><a name="[c7]"></a>lwespi_process</STRONG> (Thumb, 1566 bytes, Stack size 40 bytes, lwesp_int.o(i.lwespi_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lwespi_process &rArr; lwespi_parse_received &rArr; lwespi_process_sub_cmd &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_length
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_unicode_decode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_set_ip
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_new
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free_s
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_input_process
</UL>

<P><STRONG><a name="[101]"></a>lwespi_process_events_for_timeout_or_error</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, lwesp_int.o(i.lwespi_process_events_for_timeout_or_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lwespi_process_events_for_timeout_or_error &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_error_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
</UL>

<P><STRONG><a name="[100]"></a>lwespi_reset_everything</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, lwesp_int.o(i.lwespi_reset_everything))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lwespi_reset_everything &rArr; reset_connections &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_reset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free_s
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_connections
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[bc]"></a>lwespi_send_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwesp_int.o(i.lwespi_send_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwespi_send_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_thread_produce
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_keep_alive_timeout_fn
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ap_ip_sta
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ap_conn_disconn_sta
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_events_for_timeout_or_error
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_sub_cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[128]"></a>lwespi_send_conn_cb</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwesp_int.o(i.lwespi_send_conn_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_timeout_cb
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_events_for_timeout_or_error
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_connections
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_sub_cmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[109]"></a>lwespi_send_ip</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, lwesp_int.o(i.lwespi_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lwespi_send_ip &rArr; lwesp_u32_to_gen_str
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_u32_to_gen_str
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[108]"></a>lwespi_send_mac</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lwesp_int.o(i.lwespi_send_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lwespi_send_mac &rArr; lwesp_u32_to_gen_str
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_u32_to_gen_str
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
</UL>

<P><STRONG><a name="[ac]"></a>lwespi_send_msg_to_producer_mbox</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, lwesp_int.o(i.lwespi_send_msg_to_producer_mbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_wait
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_isvalid
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_invalid
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_delete
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_create
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_putnow
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_list_ap
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_manual_tcp_try_read_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_check_available_rx_data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_send
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_restore
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_reset_with_delay
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_getip
</UL>

<P><STRONG><a name="[106]"></a>lwespi_send_number</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lwesp_int.o(i.lwespi_send_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lwespi_send_number &rArr; lwesp_u32_to_gen_str
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_u32_to_gen_str
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[10b]"></a>lwespi_send_port</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lwesp_int.o(i.lwespi_send_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lwespi_send_port &rArr; lwesp_u32_to_gen_str
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_u32_to_gen_str
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
</UL>

<P><STRONG><a name="[107]"></a>lwespi_send_string</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lwesp_int.o(i.lwespi_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwespi_send_string
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
</UL>

<P><STRONG><a name="[12c]"></a>lwespi_unicode_decode</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, lwesp_unicode.o(i.lwespi_unicode_decode))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUart
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGpio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[15f]"></a>pvPortMalloc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[177]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[14d]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[132]"></a>setupGpio</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.setupGpio))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>setupSystemClock</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(i.setupSystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = setupSystemClock &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUartMultifunction
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupUartClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>setupUart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.setupUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setupUart &rArr; UART_Open &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>setupUartClock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.setupUartClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setupUartClock &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[164]"></a>setupUartMultifunction</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.setupUartMultifunction))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystemClock
</UL>

<P><STRONG><a name="[138]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[f0]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_delete
</UL>

<P><STRONG><a name="[7e]"></a>vCheckTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.vCheckTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vCheckTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[140]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[14c]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[13a]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[139]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[13c]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[13e]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[147]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[170]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[166]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[141]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[f1]"></a>vQueueDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_delete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_delete
</UL>

<P><STRONG><a name="[168]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[15a]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[16a]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWifiTask
</UL>

<P><STRONG><a name="[fe]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_thread_terminate
</UL>

<P><STRONG><a name="[174]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[15e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[16c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[169]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[16d]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[134]"></a>vTaskStartScheduler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[86]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[7f]"></a>vWifiTask</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.vWifiTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = vWifiTask &rArr; connect_to_preferred_access_point &rArr; lwesp_sta_list_ap &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_is_joined
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_to_preferred_access_point
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[16f]"></a>xPortStartScheduler</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ee]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_init
</UL>

<P><STRONG><a name="[ef]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_create
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_create
</UL>

<P><STRONG><a name="[14a]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[f5]"></a>xQueueGenericSend</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_release
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_create
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_put
</UL>

<P><STRONG><a name="[f7]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_putnow
</UL>

<P><STRONG><a name="[fb]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mutex_unlock
</UL>

<P><STRONG><a name="[f3]"></a>xQueueReceive</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_get
</UL>

<P><STRONG><a name="[fc]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_wait
</UL>

<P><STRONG><a name="[f9]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mutex_lock
</UL>

<P><STRONG><a name="[175]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[fd]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_thread_create
</UL>

<P><STRONG><a name="[176]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[173]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[f2]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_wait
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_put
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_now
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_get
</UL>

<P><STRONG><a name="[9a]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[146]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[178]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[152]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[159]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[16e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[154]"></a>xTimerGenericCommand</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[82]"></a>lwesp_callback_func</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.lwesp_callback_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwesp_callback_func &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_evt_get_type
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.vWifiTask)
</UL>
<P><STRONG><a name="[80]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[144]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[145]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[179]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[148]"></a>prvInitialiseMutex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[149]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[14f]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[150]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[151]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[15d]"></a>prvUnlockQueue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[137]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[13b]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[142]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[143]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[81]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[14b]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[13d]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[16b]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[13f]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[15c]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[14e]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[153]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[155]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[157]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[156]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[15b]"></a>prvSwitchTimerLists</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[83]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[160]"></a>prvHeapInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heap_2.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[70]"></a>prv_def_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwesp.o(i.prv_def_callback))
<BR>[Address Reference Count : 1]<UL><LI> lwesp.o(i.lwesp_init)
</UL>
<P><STRONG><a name="[73]"></a>prv_keep_alive_timeout_fn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwesp.o(i.prv_keep_alive_timeout_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prv_keep_alive_timeout_fn &rArr; lwesp_timeout_add &rArr; lwesp_mem_calloc &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_timeout_add
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lwesp.o(i.lwesp_init)
<LI> lwesp.o(i.prv_keep_alive_timeout_fn)
</UL>
<P><STRONG><a name="[a1]"></a>flush_buff</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lwesp_conn.o(i.flush_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prv_conn_send
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_close
</UL>

<P><STRONG><a name="[7b]"></a>prv_check_available_rx_data_evt_fn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwesp_conn.o(i.prv_check_available_rx_data_evt_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prv_check_available_rx_data_evt_fn &rArr; lwespi_conn_manual_tcp_try_read_data &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_manual_tcp_try_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_conn.o(i.lwespi_conn_check_available_rx_data)
</UL>
<P><STRONG><a name="[a3]"></a>prv_conn_send</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lwesp_conn.o(i.prv_conn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_msg_to_producer_mbox
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_unlock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_core_lock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buff
</UL>

<P><STRONG><a name="[7d]"></a>prv_conn_timeout_cb</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwesp_conn.o(i.prv_conn_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = prv_conn_timeout_cb &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_start_timeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_manual_tcp_try_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_conn.o(i.lwespi_conn_start_timeout)
</UL>
<P><STRONG><a name="[7c]"></a>prv_manual_tcp_read_data_evt_fn</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwesp_conn.o(i.prv_manual_tcp_read_data_evt_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prv_manual_tcp_read_data_evt_fn &rArr; lwespi_conn_manual_tcp_try_read_data &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_manual_tcp_try_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_conn.o(i.lwespi_conn_manual_tcp_try_read_data)
</UL>
<P><STRONG><a name="[10a]"></a>lwesp_ip_is_valid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwesp_int.o(i.lwesp_ip_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
</UL>

<P><STRONG><a name="[12d]"></a>lwespi_get_reset_sub_cmd</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, lwesp_int.o(i.lwespi_get_reset_sub_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_sub_cmd
</UL>

<P><STRONG><a name="[121]"></a>lwespi_parse_received</STRONG> (Thumb, 3942 bytes, Stack size 48 bytes, lwesp_int.o(i.lwespi_parse_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lwespi_parse_received &rArr; lwespi_process_sub_cmd &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_length
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_start_timeout
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_manual_tcp_try_read_data
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_conn_check_available_rx_data
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_sem_release
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_port
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_number
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_mac
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_link_conn
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ipd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ip
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwsap
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwlif
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwlap
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwjap
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cwdhcp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_cipstatus_cipstate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ciprecvlen
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_at_sdk_version
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ap_ip_sta
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_ap_conn_disconn_sta
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sta_getip
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_set_ip
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free_s
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_data_sent
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_error_cb
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_sub_cmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process
</UL>

<P><STRONG><a name="[12a]"></a>lwespi_process_sub_cmd</STRONG> (Thumb, 1546 bytes, Stack size 32 bytes, lwesp_int.o(i.lwespi_process_sub_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwespi_process_sub_cmd &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_cipstatus_or_cipstate_cmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_cb
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_new
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_pbuf_free_s
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_reset_sub_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[129]"></a>lwespi_send_conn_error_cb</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lwesp_int.o(i.lwespi_send_conn_error_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwespi_send_conn_error_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_process_events_for_timeout_or_error
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[127]"></a>lwespi_tcpip_process_data_sent</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, lwesp_int.o(i.lwespi_tcpip_process_data_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lwespi_tcpip_process_data_sent &rArr; lwespi_tcpip_process_send_data &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_parse_received
</UL>

<P><STRONG><a name="[10c]"></a>lwespi_tcpip_process_send_data</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, lwesp_int.o(i.lwespi_tcpip_process_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lwespi_tcpip_process_send_data &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_conn_is_active
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_port
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_number
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_initiate_cmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_tcpip_process_data_sent
</UL>

<P><STRONG><a name="[12f]"></a>reset_connections</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lwesp_int.o(i.reset_connections))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = reset_connections &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_send_conn_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_reset_everything
</UL>

<P><STRONG><a name="[135]"></a>mem_alloc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lwesp_mem.o(i.mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_alloc &rArr; mem_insertfreeblock
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_insertfreeblock
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[e3]"></a>mem_assignmem</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, lwesp_mem.o(i.mem_assignmem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_assignmem
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_assignmemory
</UL>

<P><STRONG><a name="[e5]"></a>mem_calloc</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lwesp_mem.o(i.mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mem_calloc &rArr; mem_alloc &rArr; mem_insertfreeblock
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_malloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_calloc
</UL>

<P><STRONG><a name="[e7]"></a>mem_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwesp_mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_free &rArr; mem_insertfreeblock
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_insertfreeblock
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free
</UL>

<P><STRONG><a name="[136]"></a>mem_insertfreeblock</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lwesp_mem.o(i.mem_insertfreeblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_insertfreeblock
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc
</UL>

<P><STRONG><a name="[a6]"></a>get_next_timeout_diff</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lwesp_timeout.o(i.get_next_timeout_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_timeout_diff &rArr; lwesp_sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_from_mbox_with_timeout_checks
</UL>

<P><STRONG><a name="[105]"></a>process_next_timeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lwesp_timeout.o(i.process_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = process_next_timeout &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_mem_free_s
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwespi_get_from_mbox_with_timeout_checks
</UL>

<P><STRONG><a name="[c9]"></a>SYS_UnlockReg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_clock
</UL>

<P><STRONG><a name="[cf]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_uart
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_configure_pdma_rxtx_enable
</UL>

<P><STRONG><a name="[75]"></a>lwesp_ll_uart_dma_handler_rx</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwesp_ll_m480.o(i.lwesp_ll_uart_dma_handler_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwesp_ll_uart_dma_handler_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_ll_m480.o(i.lwesp_ll_configure_pdma_rxtx_enable)
</UL>
<P><STRONG><a name="[74]"></a>lwesp_ll_uart_dma_handler_tx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lwesp_ll_m480.o(i.lwesp_ll_uart_dma_handler_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwesp_ll_uart_dma_handler_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_ll_m480.o(i.lwesp_ll_configure_pdma_rxtx_enable)
</UL>
<P><STRONG><a name="[78]"></a>lwesp_ll_uart_thread_func</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.lwesp_ll_uart_thread_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lwesp_ll_uart_thread_func &rArr; lwesp_input_process &rArr; lwespi_process &rArr; lwespi_parse_received &rArr; lwespi_process_sub_cmd &rArr; lwespi_send_conn_cb &rArr; lwesp_conn_close &rArr; flush_buff &rArr; prv_conn_send &rArr; lwespi_send_msg_to_producer_mbox &rArr; lwesp_mem_free_s &rArr; lwesp_mem_free &rArr; lwesp_core_unlock &rArr; lwesp_sys_unprotect &rArr; lwesp_sys_mutex_unlock &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_input_process
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_ll_m480.o(i.lwesp_ll_configure_uart)
</UL>
<P><STRONG><a name="[db]"></a>pdma_disable_channel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.pdma_disable_channel))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
</UL>

<P><STRONG><a name="[e0]"></a>pdma_enable_channel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwesp_ll_m480.o(i.pdma_enable_channel))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_rx
</UL>

<P><STRONG><a name="[79]"></a>send_data</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwesp_ll_m480.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = send_data &rArr; lwesp_sys_mbox_get &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_stop_tx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_start_tx
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_ll_m480.o(i.lwesp_ll_init)
</UL>
<P><STRONG><a name="[76]"></a>uart_dma_rx_done_callback</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, lwesp_ll_m480.o(i.uart_dma_rx_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_dma_rx_done_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_ll_pdma_untransfer_bytecount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_ll_m480.o(i.lwesp_ll_configure_uart)
</UL>
<P><STRONG><a name="[77]"></a>uart_dma_tx_done_callback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lwesp_ll_m480.o(i.uart_dma_tx_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uart_dma_tx_done_callback &rArr; lwesp_sys_mbox_putnow &rArr; xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwesp_sys_mbox_putnow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwesp_ll_m480.o(i.lwesp_ll_configure_uart)
</UL>
<P><STRONG><a name="[98]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[99]"></a>SendChar_ToUART</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[97]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[f]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>_printf_core</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
